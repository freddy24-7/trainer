generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  role             Role             @default(TRAINER)
  createdAt        DateTime         @default(now())
  username         String?          @unique
  clerkId          String?          @unique
  teamId           Int?
  whatsappNumber   String?
  matchPlayers     MatchPlayer[]
  messagesReceived Message[]        @relation("Recipient")
  messagesSent     Message[]        @relation("Sender")
  trainingPlayers  TrainingPlayer[]
  team             Team?            @relation(fields: [teamId], references: [id])
}

model Team {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  poules         Poule[]          @relation("PrimaryTeam")
  pouleOpponents PouleOpponents[]
  players        User[]
}

model Poule {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  teamId    Int
  createdAt DateTime         @default(now())
  team      Team             @relation("PrimaryTeam", fields: [teamId], references: [id])
  opponents PouleOpponents[]
}

model PouleOpponents {
  id      Int     @id @default(autoincrement())
  pouleId Int
  teamId  Int
  matches Match[]
  poule   Poule   @relation(fields: [pouleId], references: [id])
  team    Team    @relation(fields: [teamId], references: [id])
}

model Match {
  id              Int             @id @default(autoincrement())
  pouleOpponentId Int?
  trainingMatch   Boolean
  opponentName    String?
  date            DateTime
  createdAt       DateTime        @default(now())
  pouleOpponent   PouleOpponents? @relation(fields: [pouleOpponentId], references: [id])
  matchPlayers    MatchPlayer[]
}

model MatchPlayer {
  id        Int     @id @default(autoincrement())
  matchId   Int
  userId    Int
  minutes   Int
  available Boolean
  match     Match   @relation(fields: [matchId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([matchId, userId])
}

model Training {
  id              Int              @id @default(autoincrement())
  date            DateTime
  createdAt       DateTime         @default(now())
  trainingPlayers TrainingPlayer[]
}

model TrainingPlayer {
  id         Int      @id @default(autoincrement())
  trainingId Int
  userId     Int
  absent     Boolean
  training   Training @relation(fields: [trainingId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([trainingId, userId])
}

model Message {
  id            Int      @id @default(autoincrement())
  content       String?
  senderId      Int
  createdAt     DateTime @default(now())
  recipientId   Int?
  videoUrl      String?
  videoPublicId String?
  recipient     User?    @relation("Recipient", fields: [recipientId], references: [id])
  sender        User     @relation("Sender", fields: [senderId], references: [id])
}

enum Role {
  TRAINER
  PLAYER
}
